[{"D:\\qorner-assignment\\src\\index.js":"1","D:\\qorner-assignment\\src\\App.js":"2","D:\\qorner-assignment\\src\\Components\\Header.js":"3","D:\\qorner-assignment\\src\\Components\\State.js":"4","D:\\qorner-assignment\\src\\Components\\Date.js":"5","D:\\qorner-assignment\\src\\Components\\Revenue.js":"6","D:\\qorner-assignment\\src\\Components\\Chart.js":"7","D:\\qorner-assignment\\src\\Components\\Reach.js":"8","D:\\qorner-assignment\\src\\Components\\Audience.js":"9","D:\\qorner-assignment\\src\\data.js":"10"},{"size":219,"mtime":1646038202000,"results":"11","hashOfConfig":"12"},{"size":2926,"mtime":1646221514916,"results":"13","hashOfConfig":"12"},{"size":1429,"mtime":1646191863279,"results":"14","hashOfConfig":"12"},{"size":1083,"mtime":1646221416442,"results":"15","hashOfConfig":"12"},{"size":1752,"mtime":1646221945435,"results":"16","hashOfConfig":"12"},{"size":975,"mtime":1646221249596,"results":"17","hashOfConfig":"12"},{"size":3970,"mtime":1646221941388,"results":"18","hashOfConfig":"12"},{"size":1004,"mtime":1646221271843,"results":"19","hashOfConfig":"12"},{"size":1070,"mtime":1646221286714,"results":"20","hashOfConfig":"12"},{"size":9797,"mtime":1646202049857,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1274jq6",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"D:\\qorner-assignment\\src\\index.js",[],["47","48"],"D:\\qorner-assignment\\src\\App.js",["49","50"],"import React, { useEffect, useState } from \"react\";\nimport Audience from \"./Components/Audience\";\nimport Date from \"./Components/Date\";\nimport Header from \"./Components/Header\";\nimport Reach from \"./Components/Reach\";\nimport Revenue from \"./Components/Revenue\";\nimport State from \"./Components/State\";\nimport \"./style/index.css\";\nimport moment from \"moment\";\nfunction App() {\n  const [date, setDate] = React.useState([\n    moment(\"2021-01-01\"),\n    moment(\"2021-01-31\"),\n  ]);\n  const [updatedDate,setUpdatedDate] = useState([\n    moment(\"2021-01-01\"),\n    moment(\"2021-01-31\"),\n  ])\n  const [renderDate, setRenderDate] = useState(\"\");\n  const [data, setData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    let str = \"\"\n      \n    if(date[0] && date[1]){\n      str = moment(date[0]).format(\"MMM\") +\n      \" \" +\n      moment(date[0]).format(\"D\") +\n      \" - \" +\n      moment(date[1]).format(\"MMM\") +\n      \" \" +\n      moment(date[1]).format(\"D\") +\n      \", \" +\n      moment(date[0]).format(\"YYYY\") +\n      \" \" +\n      moment(date[1]).format(\"YYYY\");\n    }\n    \n    setRenderDate(str);\n    setIsLoading(true)\n    fetch(\n      `https://qorner-mock-server.herokuapp.com/stats?startDate=${moment(\n        date[0]\n      ).format(\"YYYY-MM-DD\")}&endDate=${moment(date[1]).format(\"YYYY-MM-DD\")}`\n    )\n      .then((res) => res.json())\n      .then((d) => {\n        setData(d);\n        setIsError(false);\n        console.log(d);\n      })\n      .catch((e) => {\n        console.log(e);\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [updatedDate]);\n  useEffect(() => {\n    fetch(\n      `https://qorner-mock-server.herokuapp.com/stats?startDate=${moment(\n        date[0]\n      ).format(\"YYYY-MM-DD\")}&endDate=${moment(date[1]).format(\"YYYY-MM-DD\")}`\n    )\n      .then((res) => res.json())\n      .then((d) => {\n        setData(d);\n        setIsError(false);\n        console.log(d);\n      })\n      .catch((e) => {\n        console.log(e);\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n  return (\n    <div className=\"pb-8\">\n      <Header />\n      <Date setValue={setDate} value={date} date={renderDate} setUpdatedDate={setUpdatedDate}/>\n      {isError ? (\n        <div className=\"px-4 mt-8 flex justify-center items-center font-encodeSans\" >\n          \n          <p className=\"p-4 shadow-xl rounded-2xl text-red-400\">Custom Error Message</p>\n        </div>\n      ) : (\n        <div>\n          <State date={date} data={data} isLoading={isLoading} />\n          <Revenue data={data} date={renderDate} isLoading={isLoading} />\n          <Reach data={data} date={renderDate} isLoading={isLoading} />\n          <Audience data={data} date={renderDate} isLoading={isLoading} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","D:\\qorner-assignment\\src\\Components\\Header.js",["51","52","53"],"import React from \"react\";\r\nimport HeaderImage from \"../images/Header.png\";\r\nimport Backarrow from \"../images/Backarrow.svg\";\r\nimport Youtube from \"../images/YouTube.png\";\r\nimport Logo from \"../images/Logo.svg\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div\r\n      className=\"h-1/3 bg-no-repeat bg-cover bg-bottom px-6 py-9 font-encodeSans\"\r\n      style={{ backgroundImage: `url(${HeaderImage})` }}\r\n    >\r\n      <div className=\"relative flex items-center \">\r\n        <div className=\"text-white absolute \">\r\n          <img src={Backarrow}></img>\r\n        </div>\r\n        <div className=\"flex justify-center items-center m-auto\">\r\n          <div className=\"text-white text-lg font-semibold   leading-5\">\r\n            Youtube State\r\n          </div>\r\n          <img className=\"pl-3\" src={Youtube}></img>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex justify-center items-center pt-14\">\r\n        <div>\r\n          <img  src={Logo}></img>\r\n        </div>\r\n        <div className=\"pl-2 flex flex-col \">\r\n          <p className=\"text-white font-semibold\">Dude Perfect</p>\r\n          <div className=\"text-white flex justify-start items-center text-10 font-thin  space-x-1\">\r\n            <p >56.9M subscribers</p>\r\n            <div className=\" bg-white rounded-full\" style={{padding:\"1px\"}}></div>\r\n            <p>279 videos</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","D:\\qorner-assignment\\src\\Components\\State.js",[],"D:\\qorner-assignment\\src\\Components\\Date.js",["54","55"],"import React, { useEffect, useState } from \"react\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\r\nimport DateRangePicker from \"@mui/lab/DateRangePicker\";\r\nfunction Date(props) {\r\n  \r\n  \r\n  return (\r\n    <div className=\"pt-12 font-encodeSans\">\r\n      <div className=\"flex justify-between items-center px-4\">\r\n        <div>\r\n          <p className=\"font-semibold text-sm\">Summary</p>\r\n          <p className=\"text-10 font-normal text-gray-400\">{props.date}</p>\r\n        </div>\r\n        <div>\r\n          <div className=\"px-1 py-1 font-medium text-10  border-2 text-gray-800 rounded-full\">\r\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n              <DateRangePicker\r\n                label=\"Advanced keyboard\"\r\n                value={props.value}\r\n                onChange={(newValue) => props.setValue(newValue)}\r\n                onAccept={() => {props.setUpdatedDate(props.value)}}\r\n                renderInput={(startProps, endProps) => (\r\n                  <React.Fragment>\r\n                    <input\r\n                      className=\"w-14 outline-none text-10\"\r\n                      ref={startProps.inputRef}\r\n                      {...startProps.inputProps}\r\n                    />\r\n                    <p className=\"pl-2\">to</p>\r\n                    <input\r\n                      className=\"pl-2 w-16 outline-none\"\r\n                      ref={endProps.inputRef}\r\n                      {...endProps.inputProps}\r\n                    />{\" \"}\r\n                  </React.Fragment>\r\n                )}\r\n              />\r\n            </LocalizationProvider>{\" \"}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Date;\r\n","D:\\qorner-assignment\\src\\Components\\Revenue.js",[],"D:\\qorner-assignment\\src\\Components\\Chart.js",["56","57","58","59"],"import React from \"react\";\r\nimport Info from \"../images/info.svg\";\r\nimport {\r\n  LineChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  \r\n  Legend,\r\n  Line,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport moment from \"moment\";\r\nfunction ABCY(props) {\r\n  const { x, y, stroke, payload, prefix, suffix } = props;\r\n  return (\r\n    <g transform={`translate(${x},${y})`}>\r\n      <text dx={-30} dy={5} className=\"font-bold text-10\">\r\n        {prefix + payload.value + suffix}\r\n      </text>\r\n    </g>\r\n  );\r\n}\r\n\r\nfunction ABCX(props) {\r\n  const { x, y, stroke, payload, value } = props;\r\n  console.log(payload.value);\r\n\r\n  return (\r\n    <g transform={`translate(${x},${y})`}>\r\n      <text dy={15} dx={-12} className=\"font-bold text-10\">\r\n        {moment(payload.value).format(\"MMM\") +\r\n          \" \" +\r\n          moment(payload.value).format(\"D\")}\r\n      </text>\r\n    </g>\r\n  );\r\n}\r\nconst renderLegend = (props) => {\r\n  const { payload } = props;\r\n  console.log(props);\r\n  return (\r\n    <div className=\"flex justify-center items-center pl-8 pt-2 space-x-2\">\r\n      {payload.map((entry, index) => (\r\n        <div className=\"flex space-x-1 items-center\">\r\n          <div className=\"p-1 rounded-full\" style={{backgroundColor:entry.color}}></div>\r\n          <p key={`item-${index}`} style={{color:entry.color}}>{entry.value}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\nfunction Chart(props) {\r\n  return (\r\n    <div className=\"font-encodeSans shadow-lg py-4 rounded-b-xl border-2-gray\">\r\n      <div className=\"py-2 pl-4\">\r\n        <p className=\"text-10 font-semibold text-gray-400\">{props.title}</p>\r\n        <div className=\" flex items-baseline\">\r\n          <p className=\"text-24 font-semibold\">{props.data?.change?.value}</p>\r\n          <p\r\n            className={` ${\r\n              props.unit === \"lac\" ? \"font-medium\" : \"text-24 font-semibold\"\r\n            }`}\r\n          >\r\n            {props.unit}\r\n          </p>\r\n        </div>\r\n        <div className=\"flex space-x-1 items-center\">\r\n          <p\r\n            className={`text-10 font-bold ${\r\n              props.data?.change?.percentage > 0\r\n                ? \"text-green-400\"\r\n                : \"text-red-400\"\r\n            }`}\r\n          >\r\n            {props.data?.change?.percentage + \"%\"}{\" \"}\r\n          </p>\r\n          <div className=\"group\">\r\n            <div className=\"relative \">\r\n              <img src={Info}></img>\r\n            </div>\r\n            <p className=\"absolute group-hover:visible invisible text-10 px-2 py-1 rounded-md bg-green-50 \">\r\n              {\" \"}\r\n              {props.data?.change?.info}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <hr />\r\n      <div className=\"pb-4 \">\r\n        <ResponsiveContainer width={350} height={250}>\r\n          <LineChart\r\n            data={props.data.data}\r\n            margin={{ left: -10, right: 35, top: 40 }}\r\n          >\r\n            <CartesianGrid vertical={false} />\r\n\r\n            <XAxis axisLine={false} dataKey=\"date\" tick={<ABCX />} />\r\n            <YAxis\r\n              axisLine={false}\r\n              tickLine={false}\r\n              tick={<ABCY prefix={props.prefix} suffix={props.suffix} />}\r\n            />\r\n            <Line\r\n              type=\"linear\"\r\n              dataKey=\"value1\"\r\n              dot={false}\r\n              stroke=\"#31E498\"\r\n              strokeWidth={3}\r\n              name={props.data.dataFieldMapping[\"value1\"]}\r\n            />\r\n            {props.data.dataFieldMapping[\"value2\"] && (\r\n              <Line\r\n                type=\"linear\"\r\n                dataKey=\"value2\"\r\n                dot={false}\r\n                stroke=\"#FF5C00\"\r\n                strokeWidth={3}\r\n                name={props.data.dataFieldMapping[\"value2\"]}\r\n              />\r\n            )}\r\n            <Legend iconType={\"circle\"} iconSize={8} margin={{right:-30}} content={renderLegend} />\r\n          </LineChart>\r\n        </ResponsiveContainer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chart;\r\n","D:\\qorner-assignment\\src\\Components\\Reach.js",[],"D:\\qorner-assignment\\src\\Components\\Audience.js",[],"D:\\qorner-assignment\\src\\data.js",[],{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":61,"column":6,"nodeType":"66","endLine":61,"endColumn":19,"suggestions":"67"},{"ruleId":"64","severity":1,"message":"65","line":81,"column":6,"nodeType":"66","endLine":81,"endColumn":8,"suggestions":"68"},{"ruleId":"69","severity":1,"message":"70","line":15,"column":11,"nodeType":"71","endLine":15,"endColumn":32},{"ruleId":"69","severity":1,"message":"70","line":21,"column":11,"nodeType":"71","endLine":21,"endColumn":47},{"ruleId":"69","severity":1,"message":"70","line":27,"column":11,"nodeType":"71","endLine":27,"endColumn":28},{"ruleId":"72","severity":1,"message":"73","line":1,"column":17,"nodeType":"74","messageId":"75","endLine":1,"endColumn":26},{"ruleId":"72","severity":1,"message":"76","line":1,"column":28,"nodeType":"74","messageId":"75","endLine":1,"endColumn":36},{"ruleId":"72","severity":1,"message":"77","line":15,"column":17,"nodeType":"74","messageId":"75","endLine":15,"endColumn":23},{"ruleId":"72","severity":1,"message":"77","line":26,"column":17,"nodeType":"74","messageId":"75","endLine":26,"endColumn":23},{"ruleId":"72","severity":1,"message":"78","line":26,"column":34,"nodeType":"74","messageId":"75","endLine":26,"endColumn":39},{"ruleId":"69","severity":1,"message":"70","line":80,"column":15,"nodeType":"71","endLine":80,"endColumn":31},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'date'. Either include it or remove the dependency array.","ArrayExpression",["81"],["82"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'stroke' is assigned a value but never used.","'value' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [date, updatedDate]",{"range":"87","text":"88"},"Update the dependencies array to be: [date]",{"range":"89","text":"90"},[1670,1683],"[date, updatedDate]",[2174,2176],"[date]"]